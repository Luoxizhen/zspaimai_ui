{
    "case_name": "test_mock_location",
    "run_time": "20211106 09:37:41",
    "test_type": "MockTest",
    "case_doc": null,
    "success": false,
    "failures": "",
    "errors": "Traceback (most recent call last):\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/minium-1.0.8-py3.9.egg/minium/framework/libs/unittest/suite.py\", line 32, in _handleClassSetUp\n    _miniClassSetUp()\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/minium-1.0.8-py3.9.egg/minium/framework/minitest.py\", line 489, in _miniClassSetUp\n    cls.mini = get_minium(cls.CONFIG)\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/minium-1.0.8-py3.9.egg/minium/framework/minitest.py\", line 89, in get_minium\n    g_minium = minium.miniprogram.get_minium_driver(conf=cfg)\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/minium-1.0.8-py3.9.egg/minium/miniprogram/__init__.py\", line 30, in get_minium_driver\n    return APP[application](conf, *args, **kwargs)\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/minium-1.0.8-py3.9.egg/minium/miniprogram/wx_minium.py\", line 93, in __init__\n    self.launch_dev_tool()\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/minium-1.0.8-py3.9.egg/minium/miniprogram/base_driver/minium_log.py\", line 135, in wrapper\n    result = func(*args, **kwargs)\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/minium-1.0.8-py3.9.egg/minium/miniprogram/wx_minium.py\", line 193, in launch_dev_tool\n    raise MiniLaunchError(\nminium.framework.exception.MiniLaunchError: Open project in automation mode fail! Please ensure you have permission of project and have not environ error \n",
    "start_timestamp": 1636162661.7511091,
    "is_failure": false,
    "is_error": true,
    "module": ".Users.yuanyuanhe.PycharmProjects.miniprogram-demo-test.mocktest",
    "package": "mocktest",
    "failed_line_num": -1,
    "device": {},
    "log_filename": "test_mock_location.log",
    "error_type": "MiniLaunchError",
    "error_value": "Open project in automation mode fail! Please ensure you have permission of project and have not environ error ",
    "screen_info": [],
    "check_list": [],
    "assert_list": [],
    "stop_timestamp": 1636162661.755543,
    "appId": "",
    "appName": "",
    "source": {
        "code": [
            "    def test_mock_location(self):\n",
            "        self.app.navigate_to(\"/page/API/pages/get-location/get-location\")\n",
            "\n",
            "        # \u6a21\u62df\u6b66\u6c49\u5149\u8c37\u4f4d\u7f6e\n",
            "        mock_location = {\n",
            "            \"latitude\": 30.5078502719,\n",
            "            \"longitude\": 114.4191741943,\n",
            "            \"speed\": -1,\n",
            "            \"accuracy\": 65,\n",
            "            \"verticalAccuracy\": 65,\n",
            "            \"horizontalAccuracy\": 65,\n",
            "            \"errMsg\": \"getLocation:ok\",\n",
            "        }\n",
            "        self.app.mock_wx_method(\"getLocation\", mock_location)\n",
            "\n",
            "        # \u68c0\u67e5mock\u6570\u636e\n",
            "        self.page.get_element(\"button\", inner_text=\"\u83b7\u53d6\u4f4d\u7f6e\").click()\n",
            "        self.native.allow_get_location()\n",
            "        locations = self.page.get_element(\".page-body-text-location\").get_elements(\n",
            "            \"text\"\n",
            "        )\n",
            "        self.assertEqual(locations[0].inner_text, \"E: 114\u00b042\u2032\", \"\u7ecf\u5ea6\u6821\u9a8c\")\n",
            "        self.assertEqual(locations[1].inner_text, \"N: 30\u00b051\u2032\", \"\u7eac\u5ea6\u6821\u9a8c\")\n",
            "\n",
            "        # \u53bb\u6389mock\n",
            "        self.app.restore_wx_method(\"getLocation\")\n",
            "        self.page.get_element(\"button\", inner_text=\"\u83b7\u53d6\u4f4d\u7f6e\").click()\n",
            "        self.native.allow_get_location()\n",
            "        locations = self.page.get_element(\".page-body-text-location\").get_elements(\n",
            "            \"text\"\n",
            "        )\n",
            "        self.assertNotEqual(locations[0].inner_text, \"E: 114\u00b042\u2032\", \"\u7ecf\u5ea6\u6821\u9a8c\")\n",
            "        self.assertNotEqual(locations[1].inner_text, \"N: 30\u00b051\u2032\", \"\u7eac\u5ea6\u6821\u9a8c\")\n"
        ],
        "start": 7
    },
    "filename": "test_mock_location.json"
}